#creating 3d axes
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
fig=plt.figure()
ax=plt.axes(projection='3d')
plt.show()

#points and lines
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np
ax=plt.axes(projection='3d')
zline = np.linspace(0, 15, 1000)
xline = np.sin(zline)
yline = np.cos(zline)
ax.plot3D(xline,yline,zline,color='gray')
zdata = 15 * np.random.random(100)
xdata = np.sin(zdata) + 0.1 * np.random.randn(100)
ydata = np.cos(zdata) + 0.1 * np.random.randn(100)
ax.scatter3D(xdata,ydata,zdata,c=zdata,cmap='Greens')
ax.set_xlabel('xaxis')
ax.set_ylabel('yaxis')
ax.set_zlabel('zaxis')
plt.show()

ax=plt.axes(projection='3d')
zline = np.linspace(0, 15, 1000)
xline = np.linspace(1,500,1000)
yline = np.linspace(1,25,1000)
ax.plot3D(xline,yline,zline,color='gray')
zdata = np.random.random(100)
xdata = np.random.randn(100)
ydata = np.cos(xdata)
ax.scatter3D(xdata,ydata,zdata,c=zdata,cmap='Greens')
plt.show()

ax=plt.axes(projection='3d')
zline = [41,2,3]
xline = [8,9,10]
yline = [11,12,85]
ax.plot3D(xline,yline,zline,color='gray')
plt.savefig('3d.png')
plt.show()


from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import

import matplotlib.pyplot as plt
import numpy as np
#Fixing random state for reproducibility
np.random.seed(19680801)


def randrange(n, vmin, vmax):
    return (vmax - vmin)*np.random.rand(n) + vmin
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

n = 100

# # For each set of style and range settings, plot n random points in the box
# # defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].
for c, m, zlow, zhigh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:
    xs = randrange(n, 23, 32)
    ys = randrange(n, 0, 100)
    zs = randrange(n, zlow, zhigh)
ax.scatter(xs, ys, zs, c=c, marker=m)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

plt.show()

# #contour plot
def f(x, y):
    return np.sin(np.sqrt(x ** 2 + y ** 2))

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)
x1,y1=np.meshgrid(x,y)
z=f(x1,y1)
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.contour3D(x1,y1,z,50,cmap='binary')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()

# #wireframe
def f(x, y):
    return np.sin(np.sqrt(x ** 2 + y ** 2))

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)
x1,y1=np.meshgrid(x,y)
z=f(x1,y1)
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.plot_wireframe(x1,y1,z,color='red')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()

# #surfaceplot
def f(x, y):
    return np.sin(np.sqrt(x ** 2 + y ** 2))

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)
x1,y1=np.meshgrid(x,y)
z=f(x1,y1)
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.plot_surface(x1,y1,z,rstride=1,cstride=1,cmap='viridis',edgecolor='none')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()

surface triangulation
def f(x, y):
return np.sin(np.sqrt(x ** 2 + y ** 2))
theta = 2 * np.pi * np.random.random(1000)
r = 6 * np.random.random(1000)
x = np.ravel(r * np.sin(theta))
y = np.ravel(r * np.cos(theta))
z = f(x, y)
ax = plt.axes(projection='3d')
ax.plot_trisurf(x, y, z,cmap='viridis', edgecolor='b')
plt.show()
plot using while loop
import numpy as np
import matplotlib.pyplot as plt

plt.axis([0, 10, 0, 11])

for i in range(10):
    y = np.random.random()
    plt.scatter(i, y)
    plt.pause(0.1)

plt.show()


#importing libraries 
import random 
import matplotlib.pyplot as plt 
  
fig = plt.figure() 
  
# function to get random values for graph 
def get_graphs(): 
    xs =[] 
    ys =[] 
    for i in range(10): 
         xs.append(i) 
         ys.append(random.randrange(10)) 
         return xs, ys 
  
defining subplots 
ax1 = fig.add_subplot(221) 
ax2 = fig.add_subplot(222) 
ax3 = fig.add_subplot(223) 
ax4 = fig.add_subplot(224) 
  
hiding the marker on axis 
x, y = get_graphs() 
ax1.plot(x, y) 
ax1.tick_params(axis ='both', which ='both',length = 0) 


  
hiding the ticks and markers 
x, y = get_graphs() 
ax2.plot(x, y) 
ax2.axes.get_xaxis().set_visible(False) 
ax2.axes.get_yaxis().set_visible(False)


hiding the values and displaying the marker 
x, y = get_graphs() 
ax3.plot(x, y) 
ax3.yaxis.set_major_formatter(plt.NullFormatter()) 
ax3.xaxis.set_major_formatter(plt.NullFormatter()) 


tilting the ticks (usually needed when 
the ticks are densely populated) 
x, y = get_graphs() 
ax4.plot(x, y) 
ax4.tick_params(axis ='x', rotation = 105) 
ax4.tick_params(axis ='y', rotation =-45) 
plt.show()

importing libraries 
import matplotlib.pyplot as plt 
import numpy as np 
x = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50] 
y = [1, 4, 3, 2, 7, 6, 9, 8, 10, 5]
plt.plot(x, y, 'b') 
plt.xlabel('x') 
plt.ylabel('y')
plt.xticks(np.arange(0, 51, 5)) 
plt.yticks(np.arange(0, 11, 1)) 
plt.show()   
      
